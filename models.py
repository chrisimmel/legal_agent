from pydantic import BaseModel, Field


MAX_STEP_ATTEMPTS = 3


class UserResponseDocument(BaseModel):
    """
    A document that is the final response to the user query.
    """

    content: str = Field(description="The content of the response document.")


class Step(BaseModel):
    """
    A step describes a single task to perform toward generating the final UserResponseDocument.
    """

    step_number: int
    step_description: str


class StepExecutionAttempt(BaseModel):
    """
    A record of a single attempt to execute a step.
    """

    step_index: int = Field(description="The index of the step that was attempted.")
    response_document: UserResponseDocument = Field(
        description="The response document generated by the step."
    )
    executor_notes: str = Field(description="Notes about the step execution attempt.")
    success: bool = Field(
        description="True iff the reflector determined that the step was executed successfully."
    )
    reflector_notes: str = Field(
        description="Notes about the attempt from the reflector agent."
    )


class Plan(BaseModel):
    """ "
    Contains a list of steps to be taken.
    Each step is a task description toward building the final UserResponseDocument.
    Initially, the only step will be do a vector search for a set of documents matching the user query.
    The plan also keeps track of the current step.
    """

    steps: list[Step] = Field(
        description="The steps to be taken to answer the user query.",
        default_factory=list,
    )
    current_step_index: int = Field(
        description="The current step in the plan.",
        ge=0,
        default=0,
    )

    @property
    def is_complete(self) -> bool:
        """
        True iff the plan is complete.
        """
        return self.current_step_index >= len(self.steps)


class AgentState(BaseModel):
    """
    The state of the agent.
    """

    plan: Plan = Field(
        description="The plan of steps to be taken to answer the user query, along with the current step index."
    )
    history: list[StepExecutionAttempt] = Field(
        description="The history of all step execution attempts.",
        default_factory=list,
    )
    response_document: UserResponseDocument = Field(
        description="The response document being built."
    )

    @property
    def current_step_latest_attempt(self) -> StepExecutionAttempt | None:
        """
        Get the latest attempt from the history.
        """
        return (
            self.history[-1]
            if self.history
            and self.history[-1].step_index == self.plan.current_step_index
            else None
        )
